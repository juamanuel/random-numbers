{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","numero","callApi","_callee","a","response","body","regenerator_default","wrap","_context","prev","next","undefined","fetch","sent","concat","json","status","Error","message","abrupt","stop","this","handleRandom","console","log","_this2","then","res","number","setState","catch","err","type","_this3","_this4","react_default","createElement","className","src","logo","alt","onClick","handleRandomType","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"qSAiEeA,oNA3DbC,MAAQ,CAACC,OAAQ,KAOjBC,8CAAU,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAC,EAAAH,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,eAEDC,IAAJR,EAFK,CAAAK,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAGWE,MAAK,eAHhB,OAGNR,EAHMI,EAAAK,KAAAL,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EAKWE,MAAK,eAAAE,OAAgBX,IALhC,OAKNC,EALMI,EAAAK,KAAA,cAAAL,EAAAE,KAAA,GAOWN,EAASW,OAPpB,WAOFV,EAPEG,EAAAK,KASgB,MAApBT,EAASY,OATL,CAAAR,EAAAE,KAAA,eAS2BO,MAAMZ,EAAKa,SATtC,eAAAV,EAAAW,OAAA,SAWDd,GAXC,yBAAAG,EAAAY,SAAAlB,EAAAmB,kJAJRA,KAAKC,eACLC,QAAQC,IAAIH,6CAiBA,IAAAI,EAAAJ,KACZA,KAAKpB,UACJyB,KAAK,SAAAC,GACJ,IAAI3B,EAAS2B,EAAIC,OACjBH,EAAKI,SAAS,CAAE7B,OAAQA,MAEzB8B,MAAM,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,8CAGXC,GAAK,IAAAC,EAAAZ,KACpBA,KAAKpB,QAAQ+B,GACZN,KAAK,SAAAC,GACJ,IAAI3B,EAAS2B,EAAIC,OACjBK,EAAKJ,SAAS,CAAE7B,OAAQA,MAEzB8B,MAAM,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,sCAGnB,IAAAG,EAAAb,KACP,OACEc,EAAAhC,EAAAiC,cAAA,OAAKC,UAAU,OACbF,EAAAhC,EAAAiC,cAAA,UAAQC,UAAU,cAChBF,EAAAhC,EAAAiC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAAhC,EAAAiC,cAAA,MAAIC,UAAU,aAAd,sBAEFF,EAAAhC,EAAAiC,cAAA,KAAGC,UAAU,aACVhB,KAAKtB,MAAMC,QAEdmC,EAAAhC,EAAAiC,cAAA,SACED,EAAAhC,EAAAiC,cAAA,UAAQC,UAAU,MAAMI,QAAS,kBAAKP,EAAKZ,iBAA3C,oBACAa,EAAAhC,EAAAiC,cAAA,UAAQC,UAAU,MAAMI,QAAU,kBAAKP,EAAKQ,iBAAiB,UAA7D,wBACAP,EAAAhC,EAAAiC,cAAA,UAAQC,UAAU,MAAMI,QAAU,kBAAKP,EAAKQ,iBAAiB,SAA7D,mCAtDQC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAhC,EAAAiC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.6c49b322.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {numero: 0}\n\n  componentDidMount() {\n    this.handleRandom();\n    console.log(this)\n  }\n\n  callApi = async (a) => {\n    let response;\n    if(a===undefined){\n      response = await fetch(`/api/random`);\n    } else{\n      response = await fetch(`/api/random/${a}`);\n    }\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleRandom(){\n    this.callApi()\n    .then(res => {\n      let numero = res.number;\n      this.setState({ numero: numero })\n    })\n    .catch(err => console.log(err));\n  }\n\n  handleRandomType(type){\n    this.callApi(type)\n    .then(res => {\n      let numero = res.number;\n      this.setState({ numero: numero })\n    })\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Números Random</h1>\n        </header>\n        <p className=\"App-intro\">\n          {this.state.numero}\n        </p>\n        <p>\n          <button className=\"Btn\" onClick={()=> this.handleRandom()}>Número Random</button>\n          <button className=\"Btn\" onClick={ ()=> this.handleRandomType(\"even\")}>Número Random Par</button>\n          <button className=\"Btn\" onClick={ ()=> this.handleRandomType(\"odd\")}>Número Random Impar</button>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}